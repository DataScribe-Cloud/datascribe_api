{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DataScribe API","text":"<p>Welcome to the DataScribe API documentation. This library provides a Python client and command-line interface (CLI) for interacting with the DataScribe Cloud platform, enabling seamless access to data tables and materials science data.</p>"},{"location":"#what-is-datascribe","title":"What is DataScribe?","text":"<p>DataScribe is a cloud-based platform for managing, querying, and analyzing scientific data tables. The DataScribe API allows programmatic access to:</p> <ul> <li>Data Tables: Query, filter, and retrieve scientific datasets</li> <li>Materials Data: Search and retrieve materials science data from multiple providers</li> <li>Metadata: Access table schemas, column information, and row counts</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Simple Python Client: Easy-to-use client for programmatic access</li> <li>Command-Line Interface: Full-featured CLI for terminal workflows</li> <li>Type-Safe Models: Pydantic models for data validation and IDE support</li> <li>Advanced Filtering: Powerful query capabilities with filter chains</li> <li>Pandas Integration: Convert results to DataFrames with <code>to_dataframe()</code></li> <li>Multiple Data Sources: Access materials data from Materials Project, AFLOW, and more</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs or request features</li> <li>DataScribe Platform: https://datascribe.cloud</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms specified in the LICENSE file.</p>"},{"location":"api_reference/","title":"Python API Reference","text":"<p>Complete reference for the DataScribe Python client.</p>"},{"location":"api_reference/#client-methods","title":"Client Methods","text":""},{"location":"api_reference/#data-table-methods","title":"Data Table Methods","text":""},{"location":"api_reference/#get_data_tables","title":"get_data_tables()","text":"<p>Get all data tables in the system (requires admin privileges).</p> <p>Returns: <code>DataTables</code> - Collection of all data tables</p> Example<pre><code>client = DataScribeClient(api_key=\"admin_key\")\ntables = client.get_data_tables()\nfor table in tables:\n    print(table.table_name)\n</code></pre>"},{"location":"api_reference/#get_data_tables_for_user","title":"get_data_tables_for_user()","text":"<p>Get all data tables owned by the authenticated user.</p> <p>Returns: <code>DataTables</code> - Collection of user's data tables</p> Example<pre><code>tables = client.get_data_tables_for_user()\nprint(f\"You have {len(tables)} tables\")\n</code></pre>"},{"location":"api_reference/#get_data_table","title":"get_data_table()","text":"<p>Query rows from a specific data table.</p> <p>Parameters:</p> <p><code>tableName</code> (str) - Name of the table to query</p> <p><code>startingRow</code> (int, optional) - Starting row index for pagination (default: 0)</p> <p><code>numRows</code> (int, optional) - Number of rows to retrieve (default: 100)</p> <p>Returns: <code>DataTableRows</code> - Collection of table rows</p> Example<pre><code>rows = client.get_data_table(\n    tableName=\"my_experiments\",\n    startingRow=0,\n    numRows=50\n)\n\n# Iterate over rows\nfor row in rows:\n    print(row._datascribe_user, row.temperature)\n</code></pre>"},{"location":"api_reference/#get_data_table_rows","title":"get_data_table_rows()","text":"<p>Query table rows with advanced filtering and column selection.</p> <p>Parameters:</p> <p><code>tableName</code> (str) - Name of the table to query</p> <p><code>columns</code> (list, optional) - List of columns to retrieve</p> <p><code>filters</code> (Filter, optional) - Filter expression to apply</p> <p><code>startingRow</code> (int, optional) - Starting row index (default: 0)</p> <p><code>numRows</code> (int, optional) - Number of rows to retrieve (default: 100)</p> <p>Returns: <code>DataTableRows</code> - Filtered collection of table rows</p> Example<pre><code>from datascribe_api.filter import Filter\n\n# Simple filter\nrows = client.get_data_table_rows(\n    tableName=\"experiments\",\n    filters=Filter(\"temperature\") &gt; 300,\n    numRows=100\n)\n\n# Complex filter with column selection\ncolumns = client.get_data_table_columns(tableName=\"experiments\")\nfilter_query = (\n    (Filter(\"temperature\") &gt; 300) &amp;\n    (Filter(\"status\") == \"completed\")\n)\n\nrows = client.get_data_table_rows(\n    tableName=\"experiments\",\n    columns=columns.to_list(),\n    filters=filter_query\n)\n</code></pre>"},{"location":"api_reference/#get_data_table_columns","title":"get_data_table_columns()","text":"<p>Get column definitions for a data table.</p> <p>Parameters: <code>tableName</code> (str) - Name of the table</p> <p>Returns: <code>DataTableColumns</code> - Column definitions and metadata</p> Example<pre><code>columns = client.get_data_table_columns(tableName=\"my_table\")\n\n# Access columns\nfor col in columns.columns:\n    print(f\"{col.column_name}: {col.data_type}\")\n</code></pre>"},{"location":"api_reference/#get_data_table_metadata","title":"get_data_table_metadata()","text":"<p>Get complete metadata for a data table.</p> <p>Parameters: <code>tableName</code> (str): Name of the table</p> <p>Returns: <code>DataTableMetadata</code> - Complete table metadata</p> Example<pre><code>metadata = client.get_data_table_metadata(tableName=\"my_table\")\n\nprint(f\"Display Name: {metadata.display_name}\")\nprint(f\"Created: {metadata.created_on}\")\nprint(f\"Last Updated: {metadata.last_updated}\")\nprint(f\"Type: {metadata.table_type}\")\nprint(f\"Visibility: {metadata.visibility}\")\n\n# Access schema\nfor col in metadata.database_schema.columns:\n    print(f\"{col.column_name}: {col.column_type}\")\n</code></pre>"},{"location":"api_reference/#get_data_table_rows_count","title":"get_data_table_rows_count()","text":"<p>Get the total number of rows in a data table.</p> <p>Parameters:</p> <p><code>tableName</code> (str) - Name of the table</p> <p><code>filters</code> (Filter, optional) - Filter expression to apply</p> <p>Returns: <code>DataTableRowsCount</code> - Row count information</p> Example<pre><code># Total count\ncount = client.get_data_table_rows_count(tableName=\"my_table\")\nprint(f\"Total rows: {count.total_rows}\")\n\n# Filtered count\nfrom datascribe_api.filter import Filter\ncount = client.get_data_table_rows_count(\n    tableName=\"experiments\",\n    filters=Filter(\"status\") == \"completed\"\n)\nprint(f\"Completed experiments: {count.total_rows}\")\n</code></pre>"},{"location":"api_reference/#materials-methods","title":"Materials Methods","text":""},{"location":"api_reference/#search_materials","title":"search_materials()","text":"<p>Search for materials across multiple data providers.</p> <p>Parameters:</p> <p><code>formula</code> (str, optional) - Chemical formula to search for</p> <p><code>elements</code> (list or str, optional) - Elements to include in the search</p> <p><code>exclude_elements</code> (list or str, optional) - Elements to exclude from the search results</p> <p><code>spacegroup</code> (str, optional) - Space group symbol or number to filter materials</p> <p><code>props</code> (list or str, optional) - Material properties to filter or retrieve</p> <p><code>temperature</code> (str, optional) - Temperature condition for property-based queries</p> <p><code>providers</code> (list or str, optional) - Data providers to search (e.g., \"MP\", \"AFLOW\")</p> <p><code>page</code> (int, optional) - Page number for paginated results (default: 1)</p> <p><code>size</code> (int, optional) - Number of results per page (default: 50)</p> <p>Returns: <code>MaterialSearchResults</code> - Search results with material summaries</p> Example<pre><code># Search by formula\nresults = client.search_materials(formula=\"Fe2O3\")\n\n# Search by elements\nresults = client.search_materials(elements=[\"Fe\", \"O\"])\n\n# Search with specific providers\nresults = client.search_materials(\n    formula=\"TiO2\",\n    providers=[\"MP\", \"AFLOW\"],\n)\n\n# Access results\nprint(f\"Found {results.total} materials\")\nfor material in results.results:\n    print(f\"ID: {material.material_id}\")\n    print(f\"Formula: {material.formula}\")\n    print(f\"Elements: {material.elements}\")\n    print(f\"Properties: {material.key_props}\")\n</code></pre>"},{"location":"api_reference/#get_material_by_id","title":"get_material_by_id()","text":"<p>Retrieve specific materials by their unique identifiers.</p> <p>Parameters:</p> <p><code>ids</code> (list or str) - Material ID(s) to retrieve</p> <p><code>providers</code> (list or str, optional) - Data providers to query</p> <p>Returns: <code>MaterialByIdResults</code> - Material data from providers</p> Example<pre><code># Single material\nresults = client.get_material_by_id(ids=\"mp-149\")\n\n# Multiple materials\nresults = client.get_material_by_id(\n    ids=[\"mp-149\", \"mp-13\", \"mp-22526\"],\n    providers=[\"MP\"]\n)\n\n# Access results\nfor result in results.results:\n    print(f\"Provider: {result.provider}\")\n    print(f\"ID: {result.id}\")\n    print(f\"Data: {result.data}\")\n</code></pre>"},{"location":"api_reference/#filter-class","title":"Filter Class","text":"<p>The <code>Filter</code> class enables building complex query expressions.</p>"},{"location":"api_reference/#creating-filters","title":"Creating Filters","text":"<pre><code>from datascribe_api.filter import Filter\n\n# Simple comparison\nf1 = Filter(\"temperature\") &gt; 300\nf2 = Filter(\"status\") == \"completed\"\nf3 = Filter(\"element\") != \"Fe\"\n</code></pre>"},{"location":"api_reference/#filter-operators","title":"Filter Operators","text":""},{"location":"api_reference/#comparison-operators","title":"Comparison Operators","text":"<pre><code>Filter(\"value\") &gt; 10      # Greater than\nFilter(\"value\") &gt;= 10     # Greater than or equal\nFilter(\"value\") &lt; 10      # Less than\nFilter(\"value\") &lt;= 10     # Less than or equal\nFilter(\"value\") == 10     # Equal to\nFilter(\"value\") != 10     # Not equal to\n</code></pre>"},{"location":"api_reference/#membership-operators","title":"Membership Operators","text":"<pre><code>Filter(\"element\").in_([\"Fe\", \"Ni\", \"Co\"])         # IN\nFilter(\"element\").not_in([\"He\", \"Ne\", \"Ar\"])      # NOT IN\n</code></pre>"},{"location":"api_reference/#string-matching","title":"String Matching","text":"<pre><code>Filter(\"formula\").like(\"%O3\")       # SQL LIKE (case-sensitive)\nFilter(\"formula\").ilike(\"%o3\")      # SQL ILIKE (case-insensitive)\n</code></pre>"},{"location":"api_reference/#null-checks","title":"Null Checks","text":"<pre><code>Filter(\"error\").is_null()           # IS NULL\nFilter(\"result\").is_not_null()      # IS NOT NULL\n</code></pre>"},{"location":"api_reference/#combining-filters","title":"Combining Filters","text":"<pre><code># AND (&amp;)\ncombined = (Filter(\"temperature\") &gt; 300) &amp; (Filter(\"pressure\") &lt; 100)\n\n# OR (|)\ncombined = (Filter(\"element\") == \"Fe\") | (Filter(\"element\") == \"Ni\")\n\n# Complex combinations\ncomplex_filter = (\n    (Filter(\"temperature\") &gt; 300) &amp;\n    (Filter(\"element\").in_([\"Fe\", \"Ni\", \"Co\"])) &amp;\n    (Filter(\"bandgap\").is_not_null())\n)\n</code></pre>"},{"location":"api_reference/#using-filters","title":"Using Filters","text":"with get_data_table_rows<pre><code>rows = client.get_data_table_rows(\n    tableName=\"experiments\",\n    filters=Filter(\"temperature\") &gt; 300\n)\n</code></pre> with get_data_table_rows_count<pre><code>count = client.get_data_table_rows_count(\n    tableName=\"experiments\",\n    filters=(\n        (Filter(\"status\") == \"completed\") &amp;\n        (Filter(\"year\") &gt;= 2020)\n    )\n)\n</code></pre>"},{"location":"cli/","title":"CLI Usage","text":"<p>The DataScribe CLI provides a command-line interface for interacting with the DataScribe API. All commands support the <code>--help</code> flag for detailed information.</p>"},{"location":"cli/#installation","title":"Installation","text":"<p>The CLI is installed automatically with the DataScribe API:</p> <pre><code>pip install datascribe-api\n</code></pre>"},{"location":"cli/#configuration","title":"Configuration","text":"<p>Set your API key as an environment variable:</p> <pre><code>export DATASCRIBE_API_TOKEN=\"your_api_key\"\n</code></pre> <p>Alternatively, pass it with every command using <code>--api-key</code> (not recommended!):</p> <pre><code>datascribe_cli data-tables-for-user --api-key \"your_api_key\"\n</code></pre>"},{"location":"cli/#global-options","title":"Global Options","text":"<p>Most commands support these options:</p> <ul> <li><code>--api-key</code>: Your DataScribe API key (or set <code>DATASCRIBE_API_TOKEN</code>)</li> <li><code>--json</code>: Output in JSON format instead of pretty-printed</li> <li><code>--help</code>: Show help information</li> </ul>"},{"location":"cli/#commands","title":"Commands","text":""},{"location":"cli/#data-tables","title":"<code>data-tables</code>","text":"<p>List all available data tables (requires admin privileges).</p> Usage<pre><code>datascribe_cli data-tables [OPTIONS]\n</code></pre> <p>Options:</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key</p> <p><code>--json</code>     :   Output in JSON format</p> Examples<pre><code># Pretty-printed output\ndatascribe_cli data-tables\n\n# JSON output\ndatascribe_cli data-tables --json\n\n# With explicit API key\ndatascribe_cli data-tables --api-key \"your_key\"\n</code></pre>"},{"location":"cli/#data-tables-for-user","title":"<code>data-tables-for-user</code>","text":"<p>List all data tables owned by your user account.</p> Usage<pre><code>datascribe_cli data-tables-for-user [OPTIONS]\n</code></pre> <p>Options:</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key</p> <p><code>--json</code>     :   Output in JSON format</p> Examples<pre><code># List your tables\ndatascribe_cli data-tables-for-user\n\n# JSON output\ndatascribe_cli data-tables-for-user --json &gt; my_tables.json\n</code></pre>"},{"location":"cli/#data-table","title":"<code>data-table</code>","text":"<p>Retrieve rows from a specific data table.</p> Usage<pre><code>datascribe_cli data-table [OPTIONS]\n</code></pre> <p>Options:</p> <p><code>--table-name, -t TEXT</code>     :   Name of the data table  [required]</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key</p> <p><code>--starting-row, -s INTEGER</code>     :   Starting row index (default: 0)</p> <p><code>--num-rows, -n INTEGER</code>     :   Number of rows to retrieve (default: 100)</p> <p><code>--json</code>     :   Output in JSON format</p> Examples<pre><code># Get first 100 rows\ndatascribe_cli data-table --table-name my_experiments\n\n# Get specific range\ndatascribe_cli data-table --table-name my_experiments --starting-row 1000 --num-rows 500\n\n# Using short flags\ndatascribe_cli data-table -t my_experiments -s 0 -n 50\n\n# JSON output\ndatascribe_cli data-table -t my_experiments --json\n</code></pre>"},{"location":"cli/#data-table-rows","title":"<code>data-table-rows</code>","text":"<p>Query table rows with advanced filtering and column selection.</p> Usage<pre><code>datascribe_cli data-table-rows [OPTIONS]\n</code></pre> <p>Options:</p> <p><code>--table-name, -t TEXT</code>     :   Name of the data table  [required]</p> <p><code>--columns, -c TEXT</code>     :   Comma-separated list of columns  [required]</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key</p> <p><code>--starting-row, -s INTEGER</code>     :   Starting row index (default: 0)</p> <p><code>--num-rows, -n INTEGER</code>     :   Number of rows to retrieve (default: 100)</p> <p><code>--filter, -f TEXT</code>     :   Filter expression (can be used multiple times)</p> <p><code>--json</code>     :   Output in JSON format</p> <p>Filter Syntax:</p> <ul> <li>Comparison: <code>column &gt; value</code>, <code>column == value</code>, <code>column != value</code></li> <li>Range: <code>column &gt;= value</code>, <code>column &lt;= value</code></li> <li>Membership: <code>column in value1,value2</code>, <code>column not in value1,value2</code></li> <li>Pattern: <code>column like %pattern%</code>, <code>column ilike %pattern%</code> (case-insensitive)</li> <li>Null checks: <code>column is null</code>, <code>column is not null</code></li> </ul> Examples<pre><code># Single filter\ndatascribe_cli data-table-rows --table-name experiments \\\n  --filter \"temperature &gt; 300\"\n\n# Multiple filters (AND logic)\ndatascribe_cli data-table-rows --table-name experiments \\\n  --filter \"temperature &gt; 300\" \\\n  --filter \"pressure &lt; 100\" \\\n  --filter \"element in Fe,Ni,Co\"\n\n# Pattern matching\ndatascribe_cli data-table-rows --table-name materials \\\n  --filter \"formula like %O3\"\n\n# Null checks\ndatascribe_cli data-table-rows --table-name results \\\n  --filter \"error is null\"\n\n# Complex query with pagination\ndatascribe_cli data-table-rows --table-name large_dataset \\\n  --filter \"year &gt;= 2020\" \\\n  --filter \"status == completed\" \\\n  --starting-row 1000 \\\n  --num-rows 100 \\\n  --json\n</code></pre>"},{"location":"cli/#data-table-columns","title":"<code>data-table-columns</code>","text":"<p>Get column definitions and metadata for a data table.</p> Usage<pre><code>datascribe_cli data-table-columns [OPTIONS]\n</code></pre> <p>Options:</p> <p><code>--table-name, -t TEXT</code>     :   Name of the data table  [required]</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key</p> <p><code>--json</code>     :   Output in JSON format</p> Examples<pre><code># Show columns\ndatascribe_cli data-table-columns --table-name my_table\n\n# JSON output\ndatascribe_cli data-table-columns -t my_table --json\n</code></pre>"},{"location":"cli/#data-table-metadata","title":"<code>data-table-metadata</code>","text":"<p>Get complete metadata for a data table, including schema and timestamps.</p> Usage<pre><code>datascribe_cli data-table-metadata [OPTIONS]\n</code></pre> <p>Options:</p> <p><code>--table-name, -t TEXT</code>     :   Name of the data table  [required]</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key</p> <p><code>--json</code>     :   Output in JSON format</p> Examples<pre><code># Show metadata\ndatascribe_cli data-table-metadata --table-name my_table\n\n# JSON output\ndatascribe_cli data-table-metadata -t my_table --json\n</code></pre>"},{"location":"cli/#data-table-rows-count","title":"<code>data-table-rows-count</code>","text":"<p>Get the total number of rows in a data table, optionally with filters.</p> Usage<pre><code>datascribe_cli data-table-rows-count [OPTIONS]\n</code></pre> <p>Options:</p> <p><code>--table-name, -t TEXT</code>     :   Name of the data table  [required]</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key</p> <p><code>--filter, -f TEXT</code>     :   Filter expression (can be used multiple times)</p> <p><code>--json</code>     :   Output in JSON format</p> Examples<pre><code># Total row count\ndatascribe_cli data-table-rows-count --table-name my_table\n\n# Count with filters\ndatascribe_cli data-table-rows-count -t experiments \\\n  --filter \"temperature &gt; 300\" \\\n  --filter \"status == completed\"\n\n# JSON output\ndatascribe_cli data-table-rows-count -t my_table --json\n</code></pre>"},{"location":"cli/#search-materials","title":"<code>search-materials</code>","text":"<p>Search for materials across multiple data providers.</p> Usage<pre><code>datascribe_cli search-materials [OPTIONS]\n</code></pre> <p>Options:</p> <p><code>--formula, -f TEXT</code>     :   Chemical formula to search for (e.g., SiO2, Fe2O3)</p> <p><code>--elements, -e TEXT</code>     :   Comma-separated list of required elements (e.g., Si,O)</p> <p><code>--exclude-elements, -x TEXT</code>     :   Comma-separated list of elements to exclude (e.g., Pb,Hg)</p> <p><code>--spacegroup, -g TEXT</code>     :   Space group or crystal system to filter by (e.g., cubic, Pnma)</p> <p><code>--props, -p TEXT</code>     :   Comma-separated list of properties to include (e.g., band_gap,formation_energy)</p> <p><code>--temperature, -t TEXT</code>     :   Temperature filter (if supported by provider)</p> <p><code>--mp</code>     :   Query Materials Project provider</p> <p><code>--aflow</code>     :   Query AFLOW provider</p> <p><code>--oqmd</code>     :   Query OQMD provider</p> <p><code>--page INTEGER</code>     :   Page number for paginated results   [default: 1]</p> <p><code>--size INTEGER</code>     :   Number of results per page   [default: 50]</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key</p> <p><code>--json</code>     :   Output in JSON format</p> Examples<pre><code># Search by formula\ndatascribe_cli search-materials --formula \"Fe2O3\"\n\n# Search by elements\ndatascribe_cli search-materials --elements Fe,O\n\n# Search with specific providers\ndatascribe_cli search-materials \\\n  --formula \"TiO2\" \\\n  --mp --aflow\n\n# Limit results\ndatascribe_cli search-materials \\\n  --elements Fe,Ni \\\n  --size 50\n\n# JSON output\ndatascribe_cli search-materials \\\n  --formula \"Fe2O3\" \\\n  --json &gt; iron_oxide_materials.json\n</code></pre>"},{"location":"cli/#get-material-by-id","title":"<code>get-material-by-id</code>","text":"<p>Retrieve specific materials by their unique identifiers.</p> Usage<pre><code>datascribe_cli get-material-by-id [OPTIONS]\n</code></pre> <p>Options:</p> <p><code>-i, --ids TEXT</code>     :   Material IDs to retrieve (e.g., mp-190, aflow:xxxx)  [required]</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key  [env var: DATASCRIBE_API_TOKEN; required]</p> <p><code>--mp</code>     :   Query Materials Project provider</p> <p><code>--aflow</code>     :   Query AFLOW provider</p> <p><code>--api-key TEXT</code>     :   Your DataScribe API key</p> <p><code>--json</code>     :   Output in JSON format</p> Examples<pre><code># Single material\ndatascribe_cli get-material-by-id --ids mp-149\n\n# Multiple materials\ndatascribe_cli get-material-by-id --ids mp-149,mp-13,mp-22526\n\n# Specific providers\ndatascribe_cli get-material-by-id -i mp-149 \\\n  --mp\n\n# JSON output\ndatascribe_cli get-material-by-id -i mp-149,mp-13 \\\n  --mp \\\n  --json\n</code></pre>"},{"location":"cli/#getting-help","title":"Getting Help","text":"<p>Every command supports <code>--help</code>:</p> <pre><code># General help\ndatascribe_cli --help\n\n# Command-specific help\ndatascribe_cli data-table-rows --help\ndatascribe_cli search-materials --help\n</code></pre>"},{"location":"endpoints/","title":"DataScribe API Endpoints","text":"<p>This page lists all available endpoints in the DataScribe API, including their HTTP paths, parameters, and descriptions.</p> Endpoint Name HTTP Path Parameters Description <code>get_data_tables</code> /data/data-tables \u2013 List all data tables (admin only) <code>get_data_tables_for_user</code> /data/data-tables-for-user \u2013 List data tables available to the user <code>get_data_table</code> /data/data-table tableName, startingRow, numRows Get rows from a data table <code>get_data_table_rows</code> /data/data-table-rows tableName, columns, startingRow, numRows, filters Get rows from a data table (with columns) <code>get_data_table_rows_count</code> /data/data-table-rows-count tableName, filters Get row count for a data table <code>get_data_table_columns</code> /data/data-table-columns tableName Get columns of a data table <code>get_data_table_metadata</code> /data/data-table-metadata tableName Get metadata for a data table <code>get_material_by_id</code> /materials ids, providers Get material by IDs <code>search_materials</code> /materials/search formula, elements, exclude_elements, spacegroup, props, temperature, providers, page, size Search for materials"},{"location":"overview/","title":"Overview","text":"<p>The DataScribe API provides programmatic access to the DataScribe Cloud platform, a comprehensive solution for managing and querying scientific data tables and materials science databases.</p>"},{"location":"overview/#what-can-you-do","title":"What Can You Do?","text":""},{"location":"overview/#data-table-operations","title":"Data Table Operations","text":"<ul> <li>List Tables: View all available data tables or just your own</li> <li>Query Tables: Retrieve rows with pagination and filtering</li> <li>Inspect Metadata: Access table schemas, column types, and creation timestamps</li> <li>Count Rows: Get the total number of rows in a table</li> <li>View Columns: List all columns with their data types and properties</li> </ul>"},{"location":"overview/#materials-science-data","title":"Materials Science Data","text":"<ul> <li>Search Materials: Query materials by formula, elements, or properties</li> <li>Get by ID: Retrieve specific materials by their unique identifiers</li> <li>Multiple Providers: Access data from Materials Project, AFLOW, and other sources</li> <li>Rich Metadata: Get provenance, properties, and crystal systems</li> </ul>"},{"location":"overview/#advanced-features","title":"Advanced Features","text":"<ul> <li>Filtering: Build complex queries with operators like <code>==</code>, <code>&gt;</code>, <code>&lt;</code>, <code>in</code>, <code>like</code>, and more</li> <li>Pagination: Efficiently retrieve large datasets in manageable chunks</li> <li>Data Export: Convert results to pandas DataFrames or Python lists</li> <li>Type Safety: Full Pydantic model validation for reliable data handling</li> </ul>"},{"location":"overview/#authentication","title":"Authentication","text":"<p>All API requests require authentication using an API key. You can provide it in two ways:</p> <ol> <li> <p>Environment Variable (recommended):    <pre><code>export DATASCRIBE_API_TOKEN=\"your_api_key\"\n</code></pre></p> </li> <li> <p>Direct Parameter:    <pre><code>with DataScribeClient(api_key=\"your_api_key\") as client:\n    tables = client.get_data_tables_for_user()\n</code></pre></p> </li> </ol>"},{"location":"installation/","title":"Installation &amp; Quick Start","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>Install the DataScribe API using pip:</p> <pre><code>pip install datascribe-api\n</code></pre> <p>For development:</p> <pre><code>git clone https://github.com/DataScribe-Cloud/datascribe_api.git\ncd datascribe_api\npip install -e .\n</code></pre>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or higher</li> <li>An active DataScribe account and API key</li> </ul>"},{"location":"installation/#get-your-api-key","title":"Get Your API Key","text":"<ol> <li>Visit https://datascribe.cloud/profile</li> <li>Log in or create an account</li> <li>Navigate to the API Keys section</li> <li>Generate a new API key</li> <li>Copy and save it securely</li> </ol>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>Set your API key as an environment variable:</p>"},{"location":"installation/#linuxmacos","title":"Linux/macOS","text":"<pre><code>export DATASCRIBE_API_TOKEN=\"your_api_key_here\"\n</code></pre> <p>Add to <code>~/.bashrc</code> or <code>~/.zshrc</code> for persistence:</p> <pre><code>echo 'export DATASCRIBE_API_TOKEN=\"your_api_key_here\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"installation/#windows-powershell","title":"Windows (PowerShell)","text":"<pre><code>$env:DATASCRIBE_API_TOKEN=\"your_api_key_here\"\n</code></pre> <p>For persistence:</p> <pre><code>[System.Environment]::SetEnvironmentVariable('DATASCRIBE_API_TOKEN', 'your_api_key_here', 'User')\n</code></pre>"},{"location":"installation/api/","title":"Quick Start: Python API","text":"<p>This guide shows how to use the DataScribe Python API for accessing tables, rows, columns, metadata, and materials. All objects support conversion to pandas DataFrames and Python lists for easy analysis.</p>"},{"location":"installation/api/#basic-usage","title":"Basic Usage","text":"<p>Retrieve all tables available to the user and convert them to a DataFrame or Python list for further analysis.</p> <pre><code>from datascribe_api import DataScribeClient\n\nwith DataScribeClient() as client:  # (1)!\n    tables = client.get_data_tables_for_user()\n    for table in tables:\n        print(f\"Table: {table.table_name}\")\n        print(f\"  Display Name: {table.display_name}\")\n        print(f\"  Created: {table.created_on}\")\n</code></pre> <ol> <li>Uses <code>DATASCRIBE_API_TOKEN</code> environment variable for authentication.</li> </ol>"},{"location":"installation/api/#query-a-data-table","title":"Query a Data Table","text":"<p>Fetch rows from a specific data table and convert them for analysis.</p> <pre><code>from datascribe_api import DataScribeClient\n\nwith DataScribeClient(api_key=\"your_api_key\") as client:\n    rows = client.get_data_table(\n        tableName=\"my_table\",\n        numRows=100\n    )\n    for row in rows:\n        print(row)\n    # Convert rows to DataFrame or list\n    df = rows.to_dataframe()\n    lst = rows.to_list()\n</code></pre>"},{"location":"installation/api/#filter-rows","title":"Filter Rows","text":"<p>Apply simple or complex filters to retrieve rows matching specific conditions.</p> <pre><code>from datascribe_api import DataScribeClient\nfrom datascribe_api.filter import Filter\n\nwith DataScribeClient(api_key=\"your_api_key\") as client:\n    filter_query = Filter(\"temperature\") &gt; 300\n    rows = client.get_data_table_rows(\n        tableName=\"experiments\",\n        filters=filter_query,\n        numRows=50\n    )\n\n    # Complex filters\n    complex_filter = (\n        (Filter(\"element\").in_([\"Fe\", \"Ni\", \"Co\"])) &amp;\n        (Filter(\"formation_energy\") &lt; -0.5) &amp;\n        (Filter(\"bandgap\").is_not_null())\n    )\n    rows = client.get_data_table_rows(\n        tableName=\"materials\",\n        filters=complex_filter\n    )\n</code></pre>"},{"location":"installation/api/#get-table-columns","title":"Get Table Columns","text":"<p>Retrieve column names and types for a table, and convert them for schema inspection or selection.</p> <pre><code>from datascribe_api import DataScribeClient\n\nwith DataScribeClient(api_key=\"your_api_key\") as client:\n    columns = client.get_data_table_columns(tableName=\"my_table\")\n    for col in columns.columns:\n        print(f\"{col.column_name}: {col.data_type}\")\n</code></pre>"},{"location":"installation/api/#get-table-metadata","title":"Get Table Metadata","text":"<p>Get metadata such as type, visibility, and timestamps for a table.</p> <pre><code>from datascribe_api import DataScribeClient\n\nwith DataScribeClient(api_key=\"your_api_key\") as client:\n    metadata = client.get_data_table_metadata(tableName=\"my_table\")\n    print(f\"Table Type: {metadata.table_type}\")\n    print(f\"Visibility: {metadata.visibility}\")\n    print(f\"Last Updated: {metadata.last_updated}\")\n</code></pre>"},{"location":"installation/api/#get-row-count","title":"Get Row Count","text":"<p>Get the number of rows in a table for pagination or summary statistics.</p> <pre><code>from datascribe_api import DataScribeClient\n\nwith DataScribeClient(api_key=\"your_api_key\") as client:\n    count = client.get_data_table_rows_count(tableName=\"my_table\")\n    print(f\"Total Rows: {count.total_rows}\")\n</code></pre>"},{"location":"installation/api/#search-materials","title":"Search Materials","text":"<p>Search for materials by formula, elements, and provider for further analysis.</p> <pre><code>from datascribe_api import DataScribeClient\n\nwith DataScribeClient(api_key=\"your_api_key\") as client:\n    results = client.search_materials(\n        formula=\"Fe2O3\",\n        elements=[\"Fe\", \"O\"],\n        providers=[\"MP\", \"AFLOW\"]\n    )\n    print(f\"Found {results.total} materials\")\n    for material in results.results:\n        print(f\"ID: {material.material_id}\")\n        print(f\"Formula: {material.formula}\")\n        print(f\"Elements: {material.elements}\")\n        print(f\"Properties: {material.key_props}\")\n</code></pre>"},{"location":"installation/api/#get-material-by-id","title":"Get Material by ID","text":"<p>Get material details by ID from selected providers.</p> <pre><code>from datascribe_api import DataScribeClient\n\nwith DataScribeClient(api_key=\"your_api_key\") as client:\n    results = client.get_material_by_id(\n        ids=[\"mp-149\", \"mp-13\"],\n        providers=[\"MP\"]\n    )\n    for result in results.results:\n        print(f\"Provider: {result.provider}\")\n        print(f\"ID: {result.id}\")\n        print(f\"Data: {result.data}\")\n</code></pre>"},{"location":"installation/cli/","title":"Quick Start: Command-Line Interface","text":"<p>Interact with the DataScribe API from your terminal. The CLI provides commands to list tables, query data, filter rows, inspect metadata, and search materials.</p>"},{"location":"installation/cli/#usage","title":"Usage","text":"<pre><code>$ datascribe_cli [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"installation/cli/#global-options","title":"Global Options","text":"<ul> <li><code>--install-completion</code>: Install shell completion.</li> <li><code>--show-completion</code>: Show shell completion script.</li> </ul>"},{"location":"installation/cli/#basic-commands","title":"Basic Commands","text":"<p>List and query tables, inspect columns, metadata, and row counts:</p> List tables available to the authenticated user<pre><code>$ datascribe_cli data-tables-for-user --api-key YOUR_API_KEY\n</code></pre> List all tables (admin only)<pre><code>$ datascribe_cli data-tables\n</code></pre> Query a table<pre><code>$ datascribe_cli data-table -t my_table --num-rows 100\n</code></pre> Get table columns<pre><code>$ datascribe_cli data-table-columns -t my_table\n</code></pre> Get table metadata<pre><code>$ datascribe_cli data-table-metadata -t my_table\n</code></pre> Get row count<pre><code>$ datascribe_cli data-table-rows-count -t my_table\n</code></pre>"},{"location":"installation/cli/#filtering-rows","title":"Filtering Rows","text":"<p>Filter rows using expressions and output as JSON:</p> <pre><code>$ datascribe_cli data-table-rows \\\n    -t my_table \\\n    -c col1,col2 \\\n    --filter \"temperature &gt; 300\" \\\n    --filter \"element in Fe,Ni,Co\" \\\n    --num-rows 50 \\\n    --json &gt; output.json\n</code></pre>"},{"location":"installation/cli/#materials-search","title":"Materials Search","text":"<p>Search for materials:</p> <pre><code>$ datascribe_cli search-materials \\\n    --formula \"Fe2O3\" \\\n    --elements Fe,O \\\n    --mp \\\n    --aflow\n</code></pre> <p>Get materials by ID <pre><code>$ datascribe_cli get-material-by-id \\\n    --ids mp-149,mp-13 \\\n    --mp\n</code></pre></p>"},{"location":"installation/cli/#help","title":"Help","text":"<p>For more details on each command, use:</p> <pre><code>$ datascribe_cli COMMAND --help\n</code></pre>"},{"location":"models/","title":"Models","text":"<p>The DataScribe API uses Pydantic models to provide type-safe data structures for all API responses. All models include:</p> <ul> <li>Full type validation: Automatic validation of data types and structure</li> <li>IDE support: Auto-completion and type hints in your editor</li> <li>Serialization: Easy conversion to JSON, dicts, and DataFrames</li> <li>Documentation: Built-in field descriptions and examples</li> </ul>"},{"location":"models/#available-models","title":"Available Models","text":""},{"location":"models/#data-table-models","title":"Data Table Models","text":"<ul> <li>DataTable: Represents a single data table with metadata</li> <li>DataTables: Collection of data tables</li> <li>DataTableRows: Collection of rows from a table query</li> <li>DataTableColumns: Column definitions for a table</li> <li>DataTableMetadata: Complete metadata for a table</li> <li>DataTableRowsCount: Row count information</li> </ul>"},{"location":"models/#materials-models","title":"Materials Models","text":"<ul> <li>MaterialSearchResults: Results from a materials search</li> <li>MaterialByIdResults: Results from a material ID lookup</li> </ul>"},{"location":"models/#common-methods","title":"Common Methods","text":"<p>All collection models (DataTables, DataTableRows, DataTableColumns, MaterialSearchResults, MaterialByIdResults) support these methods:</p>"},{"location":"models/#to_dataframe","title":"to_dataframe()","text":"Convert the model data to a pandas DataFrame<pre><code>from datascribe_api import DataScribeClient\n\nclient = DataScribeClient()\ntables = client.get_data_tables_for_user()\n\n# Convert to DataFrame\ndf = tables.to_dataframe()\nprint(df.head())\n</code></pre>"},{"location":"models/#to_list","title":"to_list()","text":"Convert the model data to a list of dictionaries<pre><code>rows = client.get_data_table(tableName=\"my_table\")\n\n# Convert to list\ndata = rows.to_list()\nfor row_dict in data:\n    print(row_dict)\n</code></pre>"},{"location":"models/#model-serialization","title":"Model Serialization","text":"<p>All models support standard Pydantic serialization:</p> To dictionary<pre><code>data_dict = model.model_dump()\n</code></pre> To JSON string<pre><code>json_str = model.model_dump_json()\n</code></pre> To JSON with indentation<pre><code>json_pretty = model.model_dump_json(indent=2)\n</code></pre> Exclude certain fields<pre><code>data_dict = model.model_dump(exclude={\"user_id\"})\n</code></pre> Include only certain fields<pre><code>data_dict = model.model_dump(include={\"table_name\", \"display_name\"})\n</code></pre>"},{"location":"models/DataTable/","title":"DataTable","text":"<p>Represents a single data table, including its metadata, schema, and visibility information. Use this model to inspect table properties and access related rows, columns, and metadata.</p>"},{"location":"models/DataTable/#datascribe_api.models.DataTable","title":"<code>DataTable</code>","text":"<p>Represents a data table.</p> <p>Attributes:</p> Name Type Description <code>user_id</code> <code>int</code> <p>The ID of the user associated with the table.</p> <code>table_name</code> <code>str</code> <p>The name of the table.</p> <code>display_name</code> <code>str</code> <p>The display name of the table.</p> <code>database_schema</code> <code>DatabaseSchema</code> <p>The schema of the database associated with the table.</p> <code>created_on</code> <code>str</code> <p>The creation timestamp of the table.</p> <code>last_updated</code> <code>str</code> <p>The last update timestamp of the table.</p> <code>table_type</code> <code>str</code> <p>The type of the table (e.g., temporary, permanent).</p> <code>visibility</code> <code>str</code> <p>The visibility of the table (e.g., public, private).</p>"},{"location":"models/DataTableColumns/","title":"DataTableColumns","text":"<p>Describes the columns of a data table, including names, types, and nullability. Useful for schema inspection and column selection.</p>"},{"location":"models/DataTableColumns/#datascribe_api.models.DataTableColumns","title":"<code>DataTableColumns</code>","text":"<p>Represents the columns of a data table.</p> <p>Attributes:</p> Name Type Description <code>table_name</code> <code>str</code> <p>The name of the table.</p> <code>display_name</code> <code>str</code> <p>The display name of the table.</p> <code>columns</code> <code>list[DataTableColumn]</code> <p>A list of columns in the table.</p>"},{"location":"models/DataTableColumns/#datascribe_api.models.DataTableColumns.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of columns.</p>"},{"location":"models/DataTableColumns/#datascribe_api.models.DataTableColumns.to_dataframe","title":"<code>to_dataframe() -&gt; pd.DataFrame</code>","text":"<p>Return columns as a pandas DataFrame.</p>"},{"location":"models/DataTableColumns/#datascribe_api.models.DataTableColumns.to_list","title":"<code>to_list() -&gt; list[Any]</code>","text":"<p>Return column names as a list.</p>"},{"location":"models/DataTableMetadata/","title":"DataTableMetadata","text":"<p>Provides complete metadata for a data table, including schema, timestamps, ownership, and visibility. Use this model to inspect table details and provenance.</p>"},{"location":"models/DataTableMetadata/#datascribe_api.models.DataTableMetadata","title":"<code>DataTableMetadata</code>","text":"<p>Represents metadata for a data table.</p> <p>Attributes:</p> Name Type Description <code>table_name</code> <code>str</code> <p>The name of the table.</p> <code>display_name</code> <code>str</code> <p>The display name of the table.</p> <code>user_id</code> <code>int</code> <p>The ID of the user associated with the table.</p> <code>created_on</code> <code>str</code> <p>The creation timestamp of the table.</p> <code>last_updated</code> <code>str</code> <p>The last update timestamp of the table.</p> <code>table_type</code> <code>str</code> <p>The type of the table (e.g., temporary, permanent).</p> <code>visibility</code> <code>str</code> <p>The visibility of the table (e.g., public, private).</p> <code>database_schema</code> <code>DatabaseSchema</code> <p>The schema of the database associated with the table.</p>"},{"location":"models/DataTableMetadata/#datascribe_api.models.DataTableMetadata.to_dataframe","title":"<code>to_dataframe() -&gt; pd.DataFrame</code>","text":"<p>Return metadata as a pandas DataFrame.</p>"},{"location":"models/DataTableMetadata/#datascribe_api.models.DataTableMetadata.to_list","title":"<code>to_list() -&gt; list[Any]</code>","text":"<p>Return metadata as a list of dicts.</p>"},{"location":"models/DataTableRows/","title":"DataTableRows","text":"<p>Represents a collection of rows returned from table queries. Use this model to access, filter, and convert row data for analysis.</p>"},{"location":"models/DataTableRows/#datascribe_api.models.DataTableRows","title":"<code>DataTableRows</code>","text":"<p>Represents the rows of a data table.</p>"},{"location":"models/DataTableRows/#datascribe_api.models.DataTableRows.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of rows.</p>"},{"location":"models/DataTableRows/#datascribe_api.models.DataTableRows.to_dataframe","title":"<code>to_dataframe() -&gt; pd.DataFrame</code>","text":"<p>Return rows as a pandas DataFrame.</p>"},{"location":"models/DataTableRows/#datascribe_api.models.DataTableRows.to_list","title":"<code>to_list() -&gt; list[Any]</code>","text":"<p>Return rows as a list of dicts.</p>"},{"location":"models/DataTableRowsCount/","title":"DataTableRowsCount","text":"<p>Contains row count information for a data table, optionally with filters applied. Useful for pagination and summary statistics.</p>"},{"location":"models/DataTableRowsCount/#datascribe_api.models.DataTableRowsCount","title":"<code>DataTableRowsCount</code>","text":"<p>Represents the count of rows in a data table.</p> <p>Attributes:</p> Name Type Description <code>total_rows</code> <code>int</code> <p>The number of rows in the table.</p>"},{"location":"models/DataTableRowsCount/#datascribe_api.models.DataTableRowsCount.to_dataframe","title":"<code>to_dataframe() -&gt; pd.DataFrame</code>","text":"<p>Return row count as a pandas DataFrame.</p>"},{"location":"models/DataTableRowsCount/#datascribe_api.models.DataTableRowsCount.to_list","title":"<code>to_list() -&gt; list[Any]</code>","text":"<p>Return row count as a list.</p>"},{"location":"models/DataTables/","title":"DataTables","text":"<p>Represents a collection of multiple data tables available to the user. Use this model to iterate, inspect, and convert tables for analysis.</p>"},{"location":"models/DataTables/#datascribe_api.models.DataTables","title":"<code>DataTables</code>","text":"<p>Represents the rows of a data table.</p>"},{"location":"models/DataTables/#datascribe_api.models.DataTables.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of tables.</p>"},{"location":"models/DataTables/#datascribe_api.models.DataTables.to_dataframe","title":"<code>to_dataframe() -&gt; pd.DataFrame</code>","text":"<p>Return tables as a pandas DataFrame.</p>"},{"location":"models/DataTables/#datascribe_api.models.DataTables.to_list","title":"<code>to_list() -&gt; list[Any]</code>","text":"<p>Return tables as a list of dicts.</p>"},{"location":"models/MaterialByIdResults/","title":"MaterialByIdResults","text":"<p>Contains results from looking up specific materials by their unique identifiers across multiple providers. Use this model to access detailed material data.</p>"},{"location":"models/MaterialByIdResults/#datascribe_api.models.MaterialByIdResults","title":"<code>MaterialByIdResults</code>","text":"<p>Represents the results of a material ID lookup across multiple providers.</p> <p>Attributes:</p> Name Type Description <code>results</code> <code>List[MaterialByIdResult]</code> <p>List of results from each provider.</p> <code>total</code> <code>int</code> <p>Total number of materials found across all providers.</p>"},{"location":"models/MaterialByIdResults/#datascribe_api.models.MaterialByIdResults.to_dataframe","title":"<code>to_dataframe() -&gt; pd.DataFrame</code>","text":"<p>Return results as a pandas DataFrame.</p>"},{"location":"models/MaterialByIdResults/#datascribe_api.models.MaterialByIdResults.to_list","title":"<code>to_list() -&gt; list[Any]</code>","text":"<p>Return results as a list of dicts.</p>"},{"location":"models/MaterialSearchResults/","title":"MaterialSearchResults","text":"<p>Contains results from a materials search operation across multiple data providers. Use this model to access, filter, and analyze search results.</p>"},{"location":"models/MaterialSearchResults/#datascribe_api.models.MaterialSearchResults","title":"<code>MaterialSearchResults</code>","text":"<p>Represents the results of a material search operation.</p> <p>Attributes:</p> Name Type Description <code>results</code> <code>List[MaterialSummary]</code> <p>List of material summary objects returned by the search.</p> <code>total</code> <code>int</code> <p>Total number of materials found in the search.</p>"},{"location":"models/MaterialSearchResults/#datascribe_api.models.MaterialSearchResults.to_dataframe","title":"<code>to_dataframe() -&gt; pd.DataFrame</code>","text":"<p>Return search results as a pandas DataFrame.</p>"},{"location":"models/MaterialSearchResults/#datascribe_api.models.MaterialSearchResults.to_list","title":"<code>to_list() -&gt; list[Any]</code>","text":"<p>Return search results as a list of dicts.</p>"}]}